#!/usr/bin/env node

const { exec } = require('child_process');
const { join } = require('path');
const { existsSync, writeFileSync } = require('fs');
const { createInterface } = require('readline');
const pkg = require('./package.json');

const basePath = __dirname;
const authConfigPath = 'packages/fxa-auth-server/config/secrets.json';
const paymentsConfigPath =
  'packages/fxa-payments-server/server/config/secrets.json';

const readline = createInterface({
  input: process.stdin,
  output: process.stdout,
});

// check ports

const capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
const isObject = (item) =>
  item && typeof item === 'object' && !Array.isArray(item);
const mergeDeep = (target, source) => {
  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key]) Object.assign(target, { [key]: {} });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }
  return target;
};

const info = (message) => console.log('\x1b[1m%s\x1b[0m', message);
const success = (message) => console.log('\x1b[32m%s\x1b[0m', message);
const error = (message, fatal = false) => {
  console.log('\x1b[31m%s\x1b[0m', message);
  if (fatal) {
    process.exit(1);
  }
};

const confirm = (message) => {
  return new Promise((resolve) => {
    readline.question(`${message} (Yes or No) `, (answer) => {
      if (answer === 'Yes') {
        resolve(true);
      } else {
        resolve(false);
      }
    });
  });
};
const input = (message, fallback) => {
  return new Promise((resolve) => {
    readline.question(`${message} (Default: ${fallback}) `, (answer) => {
      resolve(answer.length > 0 ? answer : fallback);
    });
  });
};
const getArg = (name, fallback) => {
  const arg = process.argv.find((arg) => arg.startsWith(`--${name}=`));
  if (!arg) {
    return fallback;
  }
  return arg.split('=')[1];
};
const skips = getArg('skip', '').split(',');

const isMacOs = async () => {
  if (mac && process.platform === 'darwin') {
    await mac();
  }
};
const isWindows = async () => {
  if (mac && process.platform === 'win32') {
    await mac();
  }
};

const execute = async (command, description) =>
  new Promise((resolve, reject) => {
    info(`\n${capitalize(description)} started...`);

    const child = exec(command);
    child.stdout.pipe(process.stdout);

    child.on('exit', (code) => {
      if (code === 0) {
        success(`${capitalize(description)} succeeded`);
        return resolve();
      }
      reject(
        `Failed to ${description}, try running it manually:\n => ${command}`
      );
    });
  });

const check = async (name, cb) =>
  new Promise((resolve, reject) => {
    const child = exec(`type -p ${name}`);
    child.on('exit', async (code) => {
      if (code !== 0) {
        if (Array.isArray(cb)) {
          await execute(...cb);
        } else if (typeof cb === 'function') {
          cb();
        }
      }
      return resolve();
    });
  });

const getFileJson = (path, fallback) => {
  const filePath = join(basePath, path);
  if (existsSync(filePath)) {
    const json = require(filePath);
    return mergeDeep(fallback, json);
  }
  return fallback;
};

const updateFileJson = (path, data) => {
  info(`Updating config in ${path}`);
  const filePath = join(basePath, path);
  writeFileSync(filePath, JSON.stringify(data, null, 2));
  success('Done!');
};

const preInstallInfo = `Let's set up Firefox Accounts...
=================================

This process will attempt to install everything necessary to run FxA.
It will also add default config values in the following files:
  - ${authConfigPath}
  - ${paymentsConfigPath}

Keep an eye out for any input steps.
`;

const postInstallInfo = `Common commands:

yarn start                Start all servers
yarn stop                 Stop all servers
yarn pm2 status           Display running server details
yarn pm2 logs [process]   Display logs for all or specific server

For more commands and details, check out the README.`;

const main = async () => {
  info(preInstallInfo);

  if (!(await confirm('Continue with setup?'))) {
    process.exit(0);
  }

  await check('yarn', ['npm install --global yarn', 'install yarn']);

  await check('docker', async () => {
    error("Docker doesn't appear to be installed. It can be installed at:");
    isMacOs(() => info('https://docs.docker.com/desktop/mac/install/'));
    isWindows(() => info('https://docs.docker.com/desktop/windows/install/'));
    process.exit(1);
  });

  await check('rustc', async () => {
    await isMacOs(async () => {
      info(
        'When prompted, enter the following details:1. Select "2) Customize installation"\n2. Leave "Default host triple" blank, hit "enter"3. Type "nightly" for "Default toolchain"\n4. Type "default" for "Profile"\n5. Type "y" for "Modify PATH variable?"\n6. Select "1) Proceed with installation"'
      );
      await execute(
        "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
        'install Rust'
      );
    });
    isWindows(() => {
      error("Rust doesn't appear to be installed. It can be installed at:");
      info('https://forge.rust-lang.org/infra/other-installation-methods.html');
      process.exit(1);
    });
  });

  if (!skips.includes('deps')) {
    await execute('yarn install', 'install dependencies');
  } else {
    info('Skipping dependency installation');
  }

  const semver = require('semver');

  if (!semver.satisfies(process.version, pkg.engines.node)) {
    error(
      `FxA requires Node ${pkg.engines.node} but you're running ${process.version}`,
      true
    );
  }

  const authConfig = getFileJson(authConfigPath, {
    subscriptions: {
      stripeApiKey: 'sk_test_123',
      paypalNvpSigCredentials: {
        enabled: true,
        sandbox: false,
        user: 'business_account_email_ID',
        pwd: 'business_account_password',
        signature: 'business_account_signature',
      },
    },
  });
  const paymentsConfig = getFileJson(paymentsConfigPath, {
    stripe: {
      apiKey: 'pk_test_123',
    },
    paypal: {
      clientId: 'sandbox_client_id',
    },
  });

  if (
    !skips.includes('stripe') &&
    (await confirm('Do you want to set up Stripe?'))
  ) {
    authConfig.subscriptions.stripeApiKey = await input(
      'Enter your test Stripe Secret Key',
      authConfig.subscriptions.stripeApiKey
    );
    paymentsConfig.stripe.apiKey = await input(
      'Enter your test Stripe Publishable Key',
      paymentsConfig.stripe.apiKey
    );
  }

  if (
    !skips.includes('paypal') &&
    (await confirm('Do you want to set up PayPal?'))
  ) {
    authConfig.subscriptions.paypalNvpSigCredentials.sandbox =
      authConfig.subscriptions.paypalNvpSigCredentials.sandbox != null
        ? authConfig.subscriptions.paypalNvpSigCredentials.sandbox
        : true;
    authConfig.subscriptions.paypalNvpSigCredentials.user = await input(
      'Enter your sandbox PayPal business account username',
      authConfig.subscriptions.paypalNvpSigCredentials.user
    );
    authConfig.subscriptions.paypalNvpSigCredentials.pwd = await input(
      'Enter your sandbox PayPal business account password',
      authConfig.subscriptions.paypalNvpSigCredentials.pwd
    );
    authConfig.subscriptions.paypalNvpSigCredentials.signature = await input(
      'Enter your sandbox PayPal business account signature',
      authConfig.subscriptions.paypalNvpSigCredentials.signature
    );
    paymentsConfig.paypal.clientId = await input(
      'Enter your sandbox PayPal client ID',
      paymentsConfig.paypal.clientId
    );
  }

  updateFileJson(authConfigPath, authConfig);
  updateFileJson(paymentsConfigPath, paymentsConfig);

  if (!skips.includes('start')) {
    await execute('yarn start', 'start servers');
  }
};

main()
  .then(() => {
    success('\nðŸŽ‰ FxA setup was successful!');
    info(`\n${postInstallInfo}`);
    process.exit(0);
  })
  .catch((err) => {
    if (err && err.message) {
      error(`ðŸ’¥ ${capitalize(err.message)}`);
      info(err.stack);
    } else {
      throw err || new Error('Something broke, but not sure what.');
    }
    process.exit(1);
  });
